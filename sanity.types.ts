/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Vote = {
  _id: string;
  _type: "vote";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  voteType?: "upvote" | "downvote";
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  comment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  createdAt?: string;
};

export type Comment = {
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  content?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  parentComment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  isReported?: boolean;
  createdAt?: string;
  isDeleted?: boolean;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  originalTitle?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  subreddit?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "subreddit";
  };
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  isReported?: boolean;
  publishedAt?: string;
  isDeleted?: boolean;
};

export type Subreddit = {
  _id: string;
  _type: "subreddit";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  moderator?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  createdAt?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  email?: string;
  imageUrl?: string;
  joinedAt?: string;
  isReported?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Vote | Comment | Post | Subreddit | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug | User;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/comment/getCommentReplies.ts
// Variable: getCommentRepliesQuery
// Query: *[_type == "comment" && parentComment._ref == $commentId] {            ...,            _id,            content,            createdAt,            "author": author->,            "replies": *[_type == "comment" && parentComment._ref == ^._id],            "votes": {                "upvotes": count(*[_type == "vote" && comment._ref == ^._id && voteType == "upvote"]),                "downvotes": count(*[_type == "vote" && comment._ref == ^._id && voteType == "downvote"]),                "netScore": count(*[_type == "vote" && comment._ref == ^._id && voteType == "upvote"])                - count(*[_type == "vote" && comment._ref == ^._id && voteType == "downvote"]),                "voteStatus": *[_type == "vote" && comment._ref == ^._id && user._ref == $userId][0].voteType            },        } | order(votes.netScore desc)
export type GetCommentRepliesQueryResult = Array<{
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  content: string | null;
  author: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    username?: string;
    email?: string;
    imageUrl?: string;
    joinedAt?: string;
    isReported?: boolean;
  } | null;
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  parentComment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  isReported?: boolean;
  createdAt: string | null;
  isDeleted?: boolean;
  replies: Array<{
    _id: string;
    _type: "comment";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    content?: string;
    author?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    post?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    parentComment?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "comment";
    };
    isReported?: boolean;
    createdAt?: string;
    isDeleted?: boolean;
  }>;
  votes: {
    upvotes: number;
    downvotes: number;
    netScore: number;
    voteStatus: "downvote" | "upvote" | null;
  };
}>;

// Source: ./sanity/lib/post/getPosts.ts
// Variable: AllPostsQuery
// Query: *[_type == "post" && isDeleted == false] {            _id,            title,            "slug":slug.current,            body,            publishedAt,            "author": author->,             "subreddit": subreddit->,             image,             isDeleted        } | order(publishedAt desc)
export type AllPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  publishedAt: string | null;
  author: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    username?: string;
    email?: string;
    imageUrl?: string;
    joinedAt?: string;
    isReported?: boolean;
  } | null;
  subreddit: {
    _id: string;
    _type: "subreddit";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    slug?: Slug;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    moderator?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    createdAt?: string;
  } | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  isDeleted: boolean | null;
}>;

// Source: ./sanity/lib/subreddit/createSubreddit.ts
// Variable: chekingExistingQuery
// Query: *[_type == "subreddit" && title == $name][0]{            _id            }
export type ChekingExistingQueryResult = {
  _id: string;
} | null;
// Variable: checkSlugQuery
// Query: *[_type == "subreddit" && slug.current == $slug][0]{                _id                }
export type CheckSlugQueryResult = {
  _id: string;
} | null;

// Source: ./sanity/lib/subreddit/getSubreddits.ts
// Variable: getSubredditsQuery
// Query: *[_type == "subreddit"] {        ...,"slug":slug.current,description, "moderator": moderator->,    } | order(_createdAt desc)
export type GetSubredditsQueryResult = Array<{
  _id: string;
  _type: "subreddit";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description: string | null;
  slug: string | null;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  moderator: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    username?: string;
    email?: string;
    imageUrl?: string;
    joinedAt?: string;
    isReported?: boolean;
  } | null;
  createdAt?: string;
}>;

// Source: ./sanity/lib/user/getUser.ts
// Variable: getExistingUserQuery
// Query: *[_type == "user" && _id == $id][0]
export type GetExistingUserQueryResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  username?: string;
  email?: string;
  imageUrl?: string;
  joinedAt?: string;
  isReported?: boolean;
} | null;

// Source: ./sanity/lib/vote/downvoteComment.ts
// Variable: existingVoteDownvoteCommentQuery
// Query: *[_type == "vote" && comment._ref == $commentId && user._ref == $userId][0]
export type ExistingVoteDownvoteCommentQueryResult = {
  _id: string;
  _type: "vote";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  voteType?: "downvote" | "upvote";
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  comment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  createdAt?: string;
} | null;

// Source: ./sanity/lib/vote/downvotePost.ts
// Variable: existingVoteDownvoteQuery
// Query: *[_type == "vote" && post._ref == $postId && user._ref == $userId][0]
export type ExistingVoteDownvoteQueryResult = {
  _id: string;
  _type: "vote";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  voteType?: "downvote" | "upvote";
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  comment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  createdAt?: string;
} | null;

// Source: ./sanity/lib/vote/getPostComments.ts
// Variable: getPostCommentsQuery
// Query: *[_type == "comment" && post._ref == $postId && !defined(parentComment)] {  ...,  _id,  content,  createdAt,  "author": author->,  "replies": *[_type == "comment" && parentComment._ref == ^._id],  "votes": {    "upvotes": count(*[_type == "vote" && comment._ref == ^._id && voteType == "upvote"]),    "downvotes": count(*[_type == "vote" && comment._ref == ^._id && voteType == "downvote"]),    "netScore": count(*[_type == "vote" && comment._ref == ^._id && voteType == "upvote"]) -                count(*[_type == "vote" && comment._ref == ^._id && voteType == "downvote"]),    "voteStatus": *[_type == "vote" && comment._ref == ^._id && user._ref == $userId][0].voteType  }} | order(votes.netScore desc, createdAt desc)
export type GetPostCommentsQueryResult = Array<{
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  content: string | null;
  author: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    username?: string;
    email?: string;
    imageUrl?: string;
    joinedAt?: string;
    isReported?: boolean;
  } | null;
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  parentComment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  isReported?: boolean;
  createdAt: string | null;
  isDeleted?: boolean;
  replies: Array<{
    _id: string;
    _type: "comment";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    content?: string;
    author?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "user";
    };
    post?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "post";
    };
    parentComment?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "comment";
    };
    isReported?: boolean;
    createdAt?: string;
    isDeleted?: boolean;
  }>;
  votes: {
    upvotes: number;
    downvotes: number;
    netScore: number;
    voteStatus: "downvote" | "upvote" | null;
  };
}>;

// Source: ./sanity/lib/vote/getPostVotes.ts
// Variable: getPostVotesQuery
// Query: {        "upvotes":count(*[_type == "vote" && post._ref == $postId && voteType == "upvote"]),        "downvotes":count(*[_type == "vote" && post._ref == $postId && voteType == "downvote"]),        "netScore":count(*[_type == "vote" && post._ref == $postId && voteType == "upvote"]) - count(*[_type == "vote" && post._ref == $postId && voteType == "downvote"])        }
export type GetPostVotesQueryResult = {
  upvotes: number;
  downvotes: number;
  netScore: number;
};

// Source: ./sanity/lib/vote/getUserPostVoteStatus.ts
// Variable: getUserPostVoteStatusQuery
// Query: *[_type == "vote" && post._ref == $postId && user._ref == $userId][0]{            voteType        }
export type GetUserPostVoteStatusQueryResult = {
  voteType: "downvote" | "upvote" | null;
} | null;

// Source: ./sanity/lib/vote/upvoteComment.ts
// Variable: existingVoteUpvoteCommentQuery
// Query: *[_type == "vote" && comment._ref == $commentId && user._ref == $userId][0]
export type ExistingVoteUpvoteCommentQueryResult = {
  _id: string;
  _type: "vote";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  voteType?: "downvote" | "upvote";
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  comment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  createdAt?: string;
} | null;

// Source: ./sanity/lib/vote/upvotePost.ts
// Variable: existingVoteUpvoteQuery
// Query: *[_type == "vote" && post._ref == $postId && user._ref == $userId][0]
export type ExistingVoteUpvoteQueryResult = {
  _id: string;
  _type: "vote";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  voteType?: "downvote" | "upvote";
  post?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  comment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  createdAt?: string;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n        *[_type == \"comment\" && parentComment._ref == $commentId] {\n            ...,\n            _id,\n            content,\n            createdAt,\n            \"author\": author->,\n            \"replies\": *[_type == \"comment\" && parentComment._ref == ^._id],\n            \"votes\": {\n                \"upvotes\": count(*[_type == \"vote\" && comment._ref == ^._id && voteType == \"upvote\"]),\n                \"downvotes\": count(*[_type == \"vote\" && comment._ref == ^._id && voteType == \"downvote\"]),\n                \"netScore\": count(*[_type == \"vote\" && comment._ref == ^._id && voteType == \"upvote\"])\n                - count(*[_type == \"vote\" && comment._ref == ^._id && voteType == \"downvote\"]),\n                \"voteStatus\": *[_type == \"vote\" && comment._ref == ^._id && user._ref == $userId][0].voteType\n            },\n        } | order(votes.netScore desc)\n\n        ": GetCommentRepliesQueryResult;
    "\n        *[_type == \"post\" && isDeleted == false] {\n            _id,\n            title,\n            \"slug\":slug.current,\n            body,\n            publishedAt,\n            \"author\": author->,\n             \"subreddit\": subreddit->,\n             image,\n             isDeleted\n        } | order(publishedAt desc)\n        ": AllPostsQueryResult;
    "\n            *[_type == \"subreddit\" && title == $name][0]{\n            _id\n            }\n        ": ChekingExistingQueryResult;
    "\n                *[_type == \"subreddit\" && slug.current == $slug][0]{\n                _id\n                }\n            ": CheckSlugQueryResult;
    "*[_type == \"subreddit\"] {\n        ...,\"slug\":slug.current,description, \"moderator\": moderator->,\n    } | order(_createdAt desc)": GetSubredditsQueryResult;
    "*[_type == \"user\" && _id == $id][0]": GetExistingUserQueryResult;
    "*[_type == \"vote\" && comment._ref == $commentId && user._ref == $userId][0]": ExistingVoteDownvoteCommentQueryResult | ExistingVoteUpvoteCommentQueryResult;
    "*[_type == \"vote\" && post._ref == $postId && user._ref == $userId][0]": ExistingVoteDownvoteQueryResult | ExistingVoteUpvoteQueryResult;
    "\n        *[_type == \"comment\" && post._ref == $postId && !defined(parentComment)] {\n  ...,\n  _id,\n  content,\n  createdAt,\n  \"author\": author->,\n  \"replies\": *[_type == \"comment\" && parentComment._ref == ^._id],\n  \"votes\": {\n    \"upvotes\": count(*[_type == \"vote\" && comment._ref == ^._id && voteType == \"upvote\"]),\n    \"downvotes\": count(*[_type == \"vote\" && comment._ref == ^._id && voteType == \"downvote\"]),\n    \"netScore\": count(*[_type == \"vote\" && comment._ref == ^._id && voteType == \"upvote\"]) -\n                count(*[_type == \"vote\" && comment._ref == ^._id && voteType == \"downvote\"]),\n    \"voteStatus\": *[_type == \"vote\" && comment._ref == ^._id && user._ref == $userId][0].voteType\n  }\n} | order(votes.netScore desc, createdAt desc)\n\n        ": GetPostCommentsQueryResult;
    "\n        {\n        \"upvotes\":count(*[_type == \"vote\" && post._ref == $postId && voteType == \"upvote\"]),\n        \"downvotes\":count(*[_type == \"vote\" && post._ref == $postId && voteType == \"downvote\"]),\n        \"netScore\":count(*[_type == \"vote\" && post._ref == $postId && voteType == \"upvote\"]) - count(*[_type == \"vote\" && post._ref == $postId && voteType == \"downvote\"])\n        }\n        ": GetPostVotesQueryResult;
    "\n        *[_type == \"vote\" && post._ref == $postId && user._ref == $userId][0]{\n            voteType\n        }\n        ": GetUserPostVoteStatusQueryResult;
  }
}
